var documenterSearchIndex = {"docs":
[{"location":"#NEXTFLEX-Small-RNA","page":"NEXTFLEX Small RNA","title":"NEXTFLEX Small RNA","text":"","category":"section"},{"location":"#Index","page":"NEXTFLEX Small RNA","title":"Index","text":"","category":"section"},{"location":"","page":"NEXTFLEX Small RNA","title":"NEXTFLEX Small RNA","text":"","category":"page"},{"location":"#Functions","page":"NEXTFLEX Small RNA","title":"Functions","text":"","category":"section"},{"location":"","page":"NEXTFLEX Small RNA","title":"NEXTFLEX Small RNA","text":"Documentation for Phaj.jl","category":"page"},{"location":"","page":"NEXTFLEX Small RNA","title":"NEXTFLEX Small RNA","text":"MissingReferenceError\r\nConfig\r\nget_genus_names\r\ncreate_target_organism_fasta_file\r\ncapture_target_files\r\nprogress_bar_update\r\nget_read_q_score!\r\nparse_fastqs\r\ntrim_adapters\r\ngenerate_mirna_counts\r\nmirna_discovery_calculation\r\nplot_mirna_counts\r\ncalculate_read_length_distribution\r\nplot_fragment_lengths\r\nalign_with_bowtie2\r\ncalculate_metrics\r\nplot_metrics\r\nfind_common_mirnas\r\nwrite_common_mirna_file\r\nplot_clustering\r\ncq_vs_mirna_count_correlation\r\nplot_cq_linear_regression\r\nremove_files\r\nremove_intermediate_files","category":"page"},{"location":"#small_rna.MissingReferenceError","page":"NEXTFLEX Small RNA","title":"small_rna.MissingReferenceError","text":"struct MissingReferenceError\n    message::String\nend\n\nA structure that represents a custom exception for missing reference.\n\n\n\n\n\n","category":"type"},{"location":"#small_rna.Config","page":"NEXTFLEX Small RNA","title":"small_rna.Config","text":"struct Config\n    library::Union{String, Nothing}\n    fasta::Union{String, Nothing}\n    organism::Union{String, Nothing}\n    threads::Int\nend\n\nA structure that stores the command-line arguments.\n\nFunctionality\n\nContains a check to ensure that a miRNA fasta file is passed as an argument. It is was\n\nnot, an error will be returned. This is to reduce the chances of an alignment errors downstream.\n\n\n\n\n\n","category":"type"},{"location":"#small_rna.get_genus_names","page":"NEXTFLEX Small RNA","title":"small_rna.get_genus_names","text":"Create a file with a list of unique species names given a miRNA mature or hairpin fasta.\n\n\n\n\n\n","category":"function"},{"location":"#small_rna.create_target_organism_fasta_file","page":"NEXTFLEX Small RNA","title":"small_rna.create_target_organism_fasta_file","text":"Function takes in mirBase mature miRNA fasta file with data from all available organisms and pulls out only the miRNA data pertaining to the target organism.\n\n\n\n\n\n","category":"function"},{"location":"#small_rna.capture_target_files","page":"NEXTFLEX Small RNA","title":"small_rna.capture_target_files","text":"capture_target_files(files_to_capture::AbstractString, directory::AbstractString=\".\")\n\nList all files in a directory. \n\nCheck to see if each file contains the target file's string. \n\nExample\n\njulia> capture_target_files(\".txt\")\n3-element Vector{String}:\n \"file1.txt\"\n \"file2.txt\"\n \"file3.txt\"\n\n\n\n\n\n","category":"function"},{"location":"#small_rna.progress_bar_update","page":"NEXTFLEX Small RNA","title":"small_rna.progress_bar_update","text":"Update progress bar on the command line.\n\n\n\n\n\n","category":"function"},{"location":"#small_rna.get_read_q_score!","page":"NEXTFLEX Small RNA","title":"small_rna.get_read_q_score!","text":"get_read_q_score!(line::String, q_score_list::Vector{Number})\n\nCalculate the quality score for a given quality string.\n\nThis function accepts ASCII-encoded quality score and produces the average q score  using a scalar value that estimates the 'total error probability' for that record. It means that if you want to calculate average quality score, you don't just sum up all the phred scores and find the average, but rather consider the  probability distribution of the scores.\n\nThe Phred score for a base Q is calculated as Q = ASCII value of quality score - 33. The error probability P for that base is then calculated as P = 10^(-Q/10). Then these probabilities are summed up for all the bases to derive total error.\n\nArguments\n\nq_score - The quality scores of the current line. q_score_list - The vector containing all calculated quality scores.\n\nReturns\n\nThe updated q score list the line's average quality score.\n\nReference\n\nIllumina's explanation on quality scores and their corresponding error rates: https://www.illumina.com/science/technology/next-generation-sequencing/plan-experiments/quality-scores.html\n\nExample\n\njulia> get_read_q_score!(\"FGFEEE<FC<FGGGGGGGGGGGFFGFG8<@8CFFGF8EFGGCGFGGGGGGFG\", [36.2, 35.9])\n3-element Vector{Float64}:\n 36.2\n 35.9\n 35.7\n\n\n\n\n\n","category":"function"},{"location":"#small_rna.parse_fastqs","page":"NEXTFLEX Small RNA","title":"small_rna.parse_fastqs","text":"parse_fastqs(fastqs::Vector{String}, sample_names::Vector{SubString{String}}, library::String)\n\nDetermine the library type, calculate read counts, percent dimers, and average Q scores  for a given set of fastq files.\n\nParameters\n\nfastqs: A vector of filenames for the fastq files.\nsample_names: A vector of sample names corresponding to the fastq files.\nlibrary: The type of library (\"v3\" or \"v4\").\n\nReturns\n\nThree dictionaries containing read counts, percent dimers, and average Q scores  indexed by sample name.\n\nExample\n\njulia> parse_fastqs([\"sample1.fastq.gz\", \"sample2.fastq.gz\", \"sample3.fastq.gz\"], \n                    [\"sample1\", \"sample2\", \"sample3\"], \"v4\")\n# Returns:\n# - A dictionary of read counts.\n# - A dictionary of percent dimers.\n# - A dictionary of average Q scores.\n\n\n\n\n\n","category":"function"},{"location":"#small_rna.trim_adapters","page":"NEXTFLEX Small RNA","title":"small_rna.trim_adapters","text":"trim_adapters(fastqs::Vector{String}, library::String, sample_names::Vector{SubString{String}})\n\nTrim the 3' adapter from each read in the provided fastq files based on the given library type.\n\nLibrary Adapters:\n\nV3 Read 1:  5' Adapter: GATCGTCGGACTGTAGAACTCTGAACNNNN   3' Adapter: NNNNTGGAATTCTCGGGTGCCAAGG\nV4 Read 1:  5' Adapter: AGATCGGAAGAGCGTCGTGTAGGGAAAGA  3' Adapter: TGGAATTCTCGGGTGCCAAGG \n\n3' bases with a quality score below 20 are trimmed. Reads shorter than 16 bases or  those that weren't trimmed are discarded.\n\nParameters\n\nfastqs: A vector of filenames for the fastq files.\nlibrary: The type of library (\"v3\" or \"v4\").\nsample_names: A vector of sample names corresponding to the fastq files.\n\nReturns\n\nA list of filenames for the trimmed fastq files.\n\nExample\n\njulia> trim_adapters([\"sub_sample1.fastq\", \"sub_sample2.fastq\", \"sub_sample3.fastq\"], \n                    \"v4\", \n                    [\"sample1\", \"sample2\", \"sample3\"])\n# Returns:\n[\"sample1.cut.fastq\", \"sample2.cut.fastq\", \"sample3.cut.fastq\"]\n\n\n\n\n\n","category":"function"},{"location":"#small_rna.generate_mirna_counts","page":"NEXTFLEX Small RNA","title":"small_rna.generate_mirna_counts","text":"generate_mirna_counts(input_sam_file::AbstractString)\n\nThis function creates a DataFrame containing all aligned miRNA and the number of times  they appear.\n\nReturns\n\nA DataFrame with the following columns:\n\nname: The name of the miRNA.\ncount: The number of times the miRNA appears in the SAM file.\n\n\n\n\n\n","category":"function"},{"location":"#small_rna.mirna_discovery_calculation","page":"NEXTFLEX Small RNA","title":"small_rna.mirna_discovery_calculation","text":"mirna_discovery_calculation(trimmed_fastqs::Vector{String}, sample_names::Vector{SubString{String}}, bowtie2_reference_name::String)\n\nAlign trimmed fastq files to a given human miRNA bowtie2 reference and calculate the number of unique miRNAs present in each sample.\n\nThe function returns:\n\nA Vector of DataFrames where each DataFrame contains the counts of miRNAs for a specific sample.\nA Vector of filenames of the SAM files generated during the alignment.\n\nParameters\n\ntrimmed_fastqs: A vector of filenames for the trimmed fastq files.\nsample_names: A vector of sample names corresponding to the fastq files.\nbowtie2_reference_name: The name of the bowtie2 reference against which the alignment should be done.\ncores: The number of threads to use for alignment.\n\nReturns\n\nA Vector of DataFrames. Each DataFrame has two columns: name representing the miRNA name and count representing the number of times the miRNA was observed in the sample.\nA Vector of filenames for the SAM files generated during the alignment.\n\nExample\n\njulia> mirna_discovery_calculation([\"sample1.cut.fastq\", \"sample2.cut.fastq\", \"sample3.cut.fastq\"], \n                                   [\"sample1\", \"sample2\", \"sample3\"], \n                                   \"human_miRNA_reference\")\n# Returns:\n# ([469x2 DataFrame\n#    Row │ name             count\n#    │ String           Int64\n#    ─────┼────────────────────────\n#      1 │ hsa-miR-1307-3p    8548\n#      2 │ hsa-miR-425-5p     3221\n#      3 │ hsa-miR-488-5p     2951\n#   ...], \n#  [\"sample1.miRNA.sam\", \"sample2.miRNA.sam\", \"sample3.miRNA.sam\"])\n\n\n\n\n\n","category":"function"},{"location":"#small_rna.plot_mirna_counts","page":"NEXTFLEX Small RNA","title":"small_rna.plot_mirna_counts","text":"plot_mirna_counts(mirna_counts_dfs::Vector{DataFrame}, sample_names::Vector{SubString{String}})\n\nPlot counts of the number of unique miRNA each sample aligned to. The function returns the names of the .csv files generated.\n\nExample\n\njulia> plot_mirna_counts([\"sample1.hairpin.hist\",\"sample2.hairpin.hist\",\"sample3.hairpin.hist\"], \n                         [\"sample1\", \"sample2\", \"sample3\"])\n[\"sample1_miRNA_counts.csv\", \"sample2_miRNA_counts.csv\", \"sample3_miRNA_counts.csv\"]\n\n\n\n\n\n","category":"function"},{"location":"#small_rna.calculate_read_length_distribution","page":"NEXTFLEX Small RNA","title":"small_rna.calculate_read_length_distribution","text":"Use aligned SAM files to create a read length distribution file.\n\n\n\n\n\n","category":"function"},{"location":"#small_rna.plot_fragment_lengths","page":"NEXTFLEX Small RNA","title":"small_rna.plot_fragment_lengths","text":"Create barplot of each sample's fragment lengths based on the number of reads found at each length\n\n\n\n\n\n","category":"function"},{"location":"#small_rna.align_with_bowtie2","page":"NEXTFLEX Small RNA","title":"small_rna.align_with_bowtie2","text":"align_with_bowtie2(fastq_file::String, read_count_dict::Dict{String, Int64})\n\nAlign fastq with specified reference RNA types.\n\nDivide reads aligned with total reads to calculate percent alignment. Store  alignment information in a dictionary.\n\nExample\n\njulia> align_with_bowtie2(\"sample1.cut.fastq\"\n                        , Dict(\"sample1\" => 6390314, \"sample2\" => 5000000, \"sample3\" => 7052928))\nDict{String, Float64} with 5 entries:\n  \"miRNA\" => 65.0\n  \"tRNA\" => 4.2\n  \"piRNA\" => 1.2\n  \"snoRNA\" => 1.9\n  \"rRNA\" => 3.3\n\n\n\n\n\n","category":"function"},{"location":"#small_rna.calculate_metrics","page":"NEXTFLEX Small RNA","title":"small_rna.calculate_metrics","text":"Calculate the bowtie2 alignment metrics for all samples. Return filename for plotting.\n\n\n\n\n\n","category":"function"},{"location":"#small_rna.plot_metrics","page":"NEXTFLEX Small RNA","title":"small_rna.plot_metrics","text":"Create barplot of each sample's RNA aligment metrics.\n\n\n\n\n\n","category":"function"},{"location":"#small_rna.find_common_mirnas","page":"NEXTFLEX Small RNA","title":"small_rna.find_common_mirnas","text":"find_common_mirnas(mirna_counts_files::Vector{String}\n                        , read_count_dict::Dict{String, Int64}\n                        , sample_names::Vector{SubString{String}}\n                        )\n\nReturn the miRNAs present in all samples, together with their counts and reads per million reads (RPM).\n\nArguments\n\nmirna_counts_files: A vector of files containing sample miRNA counts.\nread_count_dict: A dictionary where keys are sample names and values are the total number of reads \n\nfor the corresponding sample.\n\nsample_names: A vector of sample names.\n\nReturns\n\nA Tuple of three items:\nA list of miRNAs that are common to all samples.\nA list of dictionaries where each dictionary contains the miRNA counts for one sample.\nA list of dictionaries where each dictionary contains the RPM values for the miRNAs in one sample.\n\nExample\n\njulia> find_common_mirnas([\"sample1_miRNA_counts.csv\", \"sample2_miRNA_counts.csv\"]...,\n                        , Dict(\"sample1\" => 6390314, \"sample2\" => 5000000, \"sample3\" => 7052928)\n                        , [\"sample1\", \"sample2\", \"sample3\"])\n\n\n\n\n\n","category":"function"},{"location":"#small_rna.write_common_mirna_file","page":"NEXTFLEX Small RNA","title":"small_rna.write_common_mirna_file","text":"Write miRNAs all samples have in common to output file.\n\n\n\n\n\n","category":"function"},{"location":"#small_rna.plot_clustering","page":"NEXTFLEX Small RNA","title":"small_rna.plot_clustering","text":"plot_clustering(Common_miRNA_File::String)\n\nGenerates Principal Component Analysis (PCA) and Uniform Manifold Approximation and  Projection (UMAP) plots for libraries given a common miRNA RPM file.\n\nThis function performs the following steps:\n\nReads the common miRNA RPM file and creates a DataFrame.\nExtracts sample names and miRNA names.\nEnsures that there are at least two samples and more than one miRNA present in the dataset.\nTransforms the data using PCA and prepares it for plotting.\nIf there are at least two principal components, plots the PCA and saves it as \"commonmiRNAPCA.png\".\nIf there are at least three principal components, performs UMAP dimensionality reduction and clustering using K-medoids.\nPlots the UMAP and saves it as \"commonmiRNAUMAP.png\".\nWrites the PCA and UMAP information to separate CSV files for cluster tracking.\n\nArguments\n\nCommon_miRNA_File::String: Path to the common miRNA RPM file.\n\nOutputs\n\nCreates and saves PCA and UMAP plots as \"commonmiRNAPCA.png\" and \"commonmiRNAUMAP.png\".\nWrites PCA and UMAP information to \"PCAinformation.csv\" and \"UMAPinformation.csv\".\n\n\n\n\n\n","category":"function"},{"location":"#small_rna.cq_vs_mirna_count_correlation","page":"NEXTFLEX Small RNA","title":"small_rna.cq_vs_mirna_count_correlation","text":"cq_vs_mirna_count_correlation(qPCR_Data_File::String,\n                              Common_miRNA_RPM_File::String,\n                              Common_miRNA_File::String,\n                              sample_names::Vector{SubString{String}}) -> DataFrame\n\nCalculate the Pearson's correlation coefficient between qPCR data and common miRNA counts.\n\nFunctionality:\n\nFilters the qPCR data to exclude measurements without a quantification cycle (Cq) value.\nIntersects the filtered qPCR data with the miRNAs from the common miRNA files.\nComputes the average Cq value for each miRNA across replicates.\nDetermines the Pearson's correlation coefficient between the qPCR data and the common miRNA counts.\nIf the Pearson's coefficient is < -0.6 for any sample, a linear regression is plotted for that sample.\n\nParameters:\n\nqPCR_Data_File: Path to the file containing qPCR data.\nCommon_miRNA_RPM_File: Path to the file containing RPM data for common miRNAs.\nCommon_miRNA_File: Path to the file listing common miRNAs.\nsample_names: List of sample names to process.\n\nReturns:\n\nA DataFrame containing miRNA names, their average Cq values, and RPM counts for each sample.\n\nExample:\n\njulia> cq_vs_mirna_count_correlation(\"qpcr_raw_data.csv\", \"Common_RPM_miRNAs.csv\",\n                                     \"Common_miRNAs.csv\", [\"sample1\", \"sample2\", \"sample3\"])                   \n# Outputs:\n# A DataFrame with columns for miRNA, Cq, and RPM values for each sample.\n# A CSV file named \"Sample_correlation_coefficients.csv\" containing sample names and their correlation coefficients.\n\n\n\n\n\n","category":"function"},{"location":"#small_rna.plot_cq_linear_regression","page":"NEXTFLEX Small RNA","title":"small_rna.plot_cq_linear_regression","text":"Make linear regression plot for samples correlated with the qPCR data.\n\n\n\n\n\n","category":"function"},{"location":"#small_rna.remove_files","page":"NEXTFLEX Small RNA","title":"small_rna.remove_files","text":"Spot remove unecessary intermediate files.\n\n\n\n\n\n","category":"function"},{"location":"#small_rna.remove_intermediate_files","page":"NEXTFLEX Small RNA","title":"small_rna.remove_intermediate_files","text":"Remove all intermediate files.\n\n\n\n\n\n","category":"function"}]
}
